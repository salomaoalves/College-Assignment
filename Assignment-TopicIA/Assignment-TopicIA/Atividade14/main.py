# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zsyX060BLRGQxuRqCvT6UL3g57IYaLxh
"""

# Aula Prática nº4 - Agrupamento de Dados
# Grupo: Fabrício Fernandes Ziliotti - 11711BCC002
#	       Marcos Victor de Aquino Barra - 11711BCC007
#	       Salomão Oliveira Alves - 11711BCC038

from google.colab import drive
drive.mount('/content/gdrive/')

#CELULA 01
import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt 
import random

# CELULA 02

# ler o arquivo csv
def le_arq(arq_url):
  data = pd.read_csv(arq_url, header=None)
  data = np.array(data.iloc[:,0:4])
  classe = np.array(data.iloc[:,4])
  return data, classe


def exportToCsv(np_array, export_file_path):
  pd.DataFrame(np_array).to_csv(export_file_path)


# calcula a distância euclidiana entre dois pontos
def euclidiana(vetor1, vetor2):
	
	if(len(vetor1) != len(vetor2)):
		print(len(vetor1))
		print(len(vetor2))
	
		print("Os dois vetores devem possuir a mesma quantidade de elementos.")
		input()
		return

	qtdElementos, soma = len(vetor1), 0
	
	for i in range(qtdElementos):
		soma += math.pow(vetor1[i] - vetor2[i], 2)
  
	return math.sqrt(soma)
 

#Algoritmo K-Means
def Kcluster(data, k=3):
  
  #Escolhe aleatoriamente K centróides
  centroids_indexes = random.sample(range(len(data)), k=k)
  centroids = data[[centroids_indexes]]


  #O número de iterações será no máximo 100
  for t in range(100):
    #Cria uma lista contendo 3 lista vazias (vai ter id dentro dele). Esses serão os nossos clusters
    clusters = [[] for i in range(k)]
    
    #Verifica qual centroide esta mais perto de cada instância e insere o índice desses elementos em seus respectivos clusters
    for j in range(len(data)):
      row=data[j]
      best_centroid = 0 
      min_distance = np.inf
      
      for i in range(k):
        #Calcula a distância do elemento em relação ao centróide desse cluster
        d = euclidiana(centroids[i],row) 
         
        #Se ele está mais perto que a menor distância atual, esse centróide passa a ser o melhor candidato 
        if d < min_distance:
          min_distance = d
          best_centroid = i

      clusters[best_centroid].append(j)


    #Gera novos centróides a partir da média
    for ix, cluster in enumerate(clusters):
      
      averages = np.zeros(len(data[0])) # retorna um vetor de x zeros, tal que x é o número de colunas do dataset
     
      #Somatória dos elementos de cada coluna
      for col in range(len(data[0])):
        for i in cluster:
          averages[col] += data[i][col]
          
      
      #Dividindo a soma pela quantidade de elementos no cluster
      for j in range(len(averages)):
        averages[j] /= len(cluster)

      #Elegendo o novo centróide
      centroids[ix] = averages
  
  return clusters, centroids


def generateMatrixWithClusterColumn(clusters, dataset):
  newMatrixWithCluster = [[] for i in range(len(dataset))]
  
  for cluster_idx,cluster in enumerate(clusters):
    for item_idx,item in enumerate(cluster):
      newMatrixWithCluster[item] = np.append(dataset[item], [cluster_idx])
  
  return newMatrixWithCluster

# CÉLULA 03

def main(import_file_path, export_file_path, number_of_clusters):
  dataset, classe = le_arq(import_file_path)

  # abaixo, será retornado uma lista de duas dimensões com os índices de cada cluster
  clusters, centroids = Kcluster(dataset,number_of_clusters)

  # newMatrix vai conter o dataset original com a nova coluna do cluster
  newMatrix = generateMatrixWithClusterColumn(clusters, dataset)
  
  # Insere o grupo correspondente na última coluna
  exportToCsv(newMatrix, export_file_path)

  print("=================================================================================================")
  print("Dataset: ", import_file_path)
  print("Aplicou o algorítmo k-means com k=", number_of_clusters)
  print("O dataset com a última coluna contendo o cluster do objeto pode ser encontrado em: ", export_file_path)
  print("=================================================================================================")

#CELULA 6
# main()
main("/content/gdrive/My Drive/UFU/Agrupamentos/Atividade14/iris.data", "/content/gdrive/My Drive/UFU/Agrupamentos/Atividade14/result.csv", 2)
main("/content/gdrive/My Drive/UFU/Agrupamentos/Atividade14/iris.data", "/content/gdrive/My Drive/UFU/Agrupamentos/Atividade14/result.csv", 3)
main("/content/gdrive/My Drive/UFU/Agrupamentos/Atividade14/iris.data", "/content/gdrive/My Drive/UFU/Agrupamentos/Atividade14/result.csv", 4)